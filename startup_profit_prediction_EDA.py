# -*- coding: utf-8 -*-
"""Startup Profit Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fM-6faCjqh_rwsFBD07dXFRId9GbUL3b
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#from google.colab import files
import io

#uploaded = files.upload()

df = pd.read_csv('50_Startups.csv')

df.head()

df.info()

df.describe()

features_na = [features for features in df.columns if df[features].isnull().sum()>0]

for feature in features_na:
  print(feature, np.round(df[feature].isnull().mean(), 4), '% missing values')
else:
  print('No missing value')

for column in df.columns:
  print(column, df[column].nunique())

categorical_features = [feature for feature in df.columns if df[feature].dtypes == 'O']
categorical_features

for feature in categorical_features:
  print('The feature is {} and number of categories are {}'.format(feature, len(df[feature].unique())))

plt.figure(figsize = (15,80), facecolor = 'white')
plotnumber = 1
for categorical_feature in categorical_features:
  ax = plt.subplot(12, 2, plotnumber)
  sns.countplot(y = categorical_feature, data = df)
  plt.xlabel(categorical_feature)
  plt.title(categorical_feature)
  plotnumber += 1
plt.show()

plt.figure(figsize = (15, 80), facecolor = 'white')
plotnumber = 1
for feature in categorical_features:
  ax = plt.subplot(12, 2, plotnumber)
  data = df.copy()
  data.groupby(feature)['Profit'].median().plot.bar()
  plt.xlabel(feature)
  plt.ylabel('Profit')
  plt.title(feature)
  plotnumber += 1
plt.show()

numerical_features = [feature for feature in df.columns if ((df[feature].dtypes != 'O') & (feature not in ['Profit']))]
print('Number of numerical features: ', len(numerical_features))
df[numerical_features].head()

discrete_features = [feature for feature in numerical_features if len(df[feature].unique()) < 25]
print('Number of discrete features: ', len(discrete_features))

continous_features = [feature for feature in numerical_features if feature not in discrete_features+['Profit']]
print('Number of continous features: ', len(continous_features))

plt.figure(figsize = (20, 60), facecolor = 'white')
plotnumber = 1
for continous_feature in continous_features:
  ax = plt.subplot(12, 3, plotnumber)
  sns.distplot(df[continous_feature])
  plt.xlabel(continous_feature)
  plotnumber += 1
plt.show()

plt.figure(figsize = (20, 60), facecolor = 'white')
plotnumber = 1;
for feature in continous_features:
  data = df.copy()
  ax = plt.subplot(12, 3, plotnumber)
  plt.scatter(data[feature], data['Profit'])
  plt.xlabel(feature)
  plt.ylabel('Profit')
  plt.title(feature)
  plotnumber += 1
plt.show()

plt.figure(figsize = (20, 60), facecolor = 'white')
plotnumber = 1
for numerical_feature in numerical_features:
  ax = plt.subplot(12, 3, plotnumber)
  sns.boxplot(df[numerical_feature])
  plt.xlabel(numerical_feature)
  plotnumber += 1
plt.show()

cor_mat = df.corr()
fig = plt.figure(figsize = (15,7))
sns.heatmap(cor_mat, annot = True)
plt.show()

